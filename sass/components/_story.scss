.story {
    width: 75%;
    margin: 0 auto;
    box-shadow: 0 3rem 6 rem rgba($color-black, .1);
    background-color: rgba($color-white, .6);
    border-radius: 3px;
    padding: 6rem;
    padding-left: 9rem; // добавляем отуступ слева, чтобы наш круг, который мы чуть ниже сдвигаем левее не выходил за границы родителя
    font-size: $default-font-size;
    transform: skewX(-12deg);
    position: relative;

    @include respond(tab-port) {
        width: 100%;
        padding: 4rem;
        padding-left: 7rem;
    }

    @include respond(phone) {
        transform: skewX(0);
    }
   

    &__shape {
        width: 15rem;
        height: 15rem;
        float: left;
        background-color: orangered;
        -webkit-shape-outside: circle(50% at 50% 50%);
        shape-outside: circle(50% at 50% 50%);
        -webkit-clip-path: circle(50% at 50% 50%);
        clip-path: circle(50% at 50% 50%);
        transform: translateX(-3rem) skewX(12deg); // свойство shape-outside и clip-path лучше не смешивать с margin. Поэтому, чтобы не получить беспорядка, с целью подвинуть наш круг немного левее мы применяем свойство transform

        @include respond(phone) {
            transform: translateX(-3rem) skewX(0);
        }
    }

    &__img {
        height: 100%;
        transform: translateX(-4rem) scale(1.4);
        transition: all .5s;
    }

    &__text {
        transform: skewX(12deg);

        @include respond(phone) {
            transform: skewX(0);
        }
    }

    &__caption {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, 20%); // если бы мы хотели расположить строго по центру, то писали бы translate(-50%, -50%). Но у нас изначально надпись с именем появляется немного ниже и затем перемещается в центр. Поэтому мы вместо -50% по оси Y изначально указываем 20%
        color: $color-white;
        text-transform: uppercase;
        font-size: 1.7rem;
        text-align: center;
        opacity: 0;
        transition: all .5s;
    }

    &:hover &__caption { // как только элемент с классом .story приобретает состояние hover, элемент с классом story__caption получает следующие свойства scc:
        opacity: 1;
        transform: translate(-50%, -50%);

        backface-visibility: hidden; // это свойство здесь мы снова пишем для того, чтобы исправть небольшую тряску элемента в тот момент, когда после применения свойства transform, элемент занимает конечное положение
    }

    &:hover &__img {
        transform: translateX(-4rem) scale(1);
        filter: blur(3px) brightness(80%);
        backface-visibility: hidden;
    }
}